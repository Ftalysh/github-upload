import numpy as np
from scipy import optimize
import pulp as p
import tables


def solving_90():
    # –ó–∞–¥–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    c = np.array([8, 14, 11, 6, 15, 13, 12, 12, 4])
    # –¢–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ linprog —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏, –ø–æ–º–µ–Ω—è–µ–º –∑–Ω–∞–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    c = c*(-1)

    # –ó–∞–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ª–µ–≤—ã—Ö —á–∞—Å—Ç–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å—É–¥–æ–≤ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –æ–±—ä–µ–º–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –ª–∏–Ω–∏–∏
    a_ub = np.array([[1, 1, 1, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 1, 1, 1, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 1, 1, 1],
                     [8, 0, 0, 6, 0, 0, 12, 0, 0],
                     [0, 14, 0, 0, 15, 0, 0, 12, 0],
                     [0, 0, 11, 0, 0, 13, 0, 0, 4]])
    # –ó–Ω–∞–∫ 4-6 –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤–∏–¥—É '<=' -> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–º–Ω–æ–∂–∏—Ç—å –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –Ω–∞ (-1)
    a_ub = a_ub * ([1],
                   [1],
                   [1],
                   [-1],
                   [-1],
                   [-1])
    # –ó–∞–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –ø—Ä–∞–≤—Ö —á–∞—Å—Ç–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å—É–¥–æ–≤ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –æ–±—ä–µ–º–∞ –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ –ª–∏–Ω–∏–∏
    b_ub = np.array([300, 300, 300, 3000, 5400, 3300])
    # –î–æ–º–Ω–æ–∂–∏–º 4-6 —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ (-1)
    b_ub = b_ub * [1, 1, 1, -1, -1, -1]

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    opt = optimize.linprog(c, A_ub=a_ub, b_ub=b_ub, bounds=None, method='interior-point')
    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –¥–æ —Å–æ—Ç—ã—Ö –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ max –æ–±—ä–µ–º–∞ –ø–æ—Å—Ç–∞–≤–æ–∫
    # –ø—Ä–∏ max –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—É–¥–æ–≤, –≤–∑—è—Ç–æ–µ —Å–æ –∑–Ω–∞–∫–æ–º '-'
    min_result = round(opt.fun, 2)
    # –ò—Å–ø—Ä–∞–≤–∏–º –∑–Ω–∞–∫
    result = -min_result
    # –í—ã–≤–µ–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω
    print('\n‚úî–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 2 –ø–æ–¥–∑–∞–¥–∞—á–∏ 90‚úî\n')
    print('üõ¢–úax –æ–±—ä–µ–º –ø–µ—Ä–µ–≤–æ–∑–æ–∫ –ø—Ä–∏ max –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å—É–¥–æ–≤: max(z) = {} –º–ª–Ω. —Ç–æ–Ω–Ω–æ-–º–∏–ª—å.\n'.format(result))
    # –ò–∑–≤–ª–µ—á–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ—Å—Ç–∞–≤–æ–∫
    del_plan = np.array([round(i, 2) for i in opt.x])
    # –ü–æ—Å—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –ø–ª–∞–Ω–∞, –≥–¥–µ xji = –≤—Ä–µ–º—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ i-–æ–≥–æ —Å—É–¥–Ω–∞ –Ω–∞ j-–æ–π –ª–∏–Ω–∏–∏
    plan_matrix = np.resize(del_plan, (3, 3))
    # –°–¥–µ–ª–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –ø–ª–∞–Ω–∞
    print('üö¢–ü–ª–∞–Ω –ø–æ—Å—Ç–∞–≤–æ–∫:')
    j = 0
    for row in plan_matrix:
        j += 1
        i = 0
        for column in row:
            i += 1
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if plan_matrix[j-1, i-1] != 0:
                print('{}-–æ–µ —Å—É–¥–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {} '
                      '—á–∞—Å–æ–≤ –Ω–∞ –ª–∏–Ω–∏–∏ {};'.format(j, column, i))


def solving_92():
    # –ó–∞–¥–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    c = [8, 7, 5, 10, 13, 12, 13, 8, 10, 7, 11, 6, 12, 4, 11, 9, 14, 10, 14, 6, 12, 13, 13, 7, 9, 12, 14, 15, 8, 8]
    # –ó–∞–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ª–µ–≤—ã—Ö —á–∞—Å—Ç–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–∞–≤–æ–¥–æ–≤
    a_ub = np.array([[1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]])
    # –ó–∞–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –ø—Ä–∞–≤—ã—Ö —á–∞—Å—Ç–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–∞–≤–æ–¥–æ–≤
    b_ub = [360, 180, 120, 150, 240]
    # –ó–∞–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ª–µ–≤—ã—Ö —á–∞—Å—Ç–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    a_eq = np.array([[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                     [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                     [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                     [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0],
                     [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
                     [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]])
    # –ó–∞–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –ø—Ä–∞–≤—Ö —á–∞—Å—Ç–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    b_eq = [230, 220, 130, 170, 190, 110]
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    opt = optimize.linprog(c, A_ub=a_ub, b_ub=b_ub, A_eq=a_eq, b_eq=b_eq, bounds=None)
    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫ –∫–∏—Ä–ø–∏—á–µ–π
    result = round(opt.fun, 2)
    # –í—ã–≤–µ–¥–µ–º –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω
    print('\n‚úî–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 2 –ø–æ–¥–∑–∞–¥–∞—á–∏ 92‚úî\n')
    print('üí∞–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫ –∫–∏—Ä–ø–∏—á–µ–π: min(z) = {} y.e.\n'.format(result))
    # –ò–∑–≤–ª–µ—á–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ—Å—Ç–∞–≤–æ–∫
    del_plan = np.array([round(i, 2) for i in opt.x])
    # –ü–æ—Å—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É –ø–ª–∞–Ω–∞, –≥–¥–µ xji = –∫–æ–ª-–≤–æ –∫–∏—Ä–ø–∏—á–∞, –ø–æ—Å—Ç–∞–≤–ª—è–µ–º–æ–µ —Å j-–æ–≥–æ –∑–∞–≤–æ–¥–∞ –Ω–∞ i-—ã–π –æ–±—ä–µ–∫—Ç
    plan_matrix = np.resize(del_plan, (5, 6))
    # –°–¥–µ–ª–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –ø–ª–∞–Ω–∞
    print('üöö–ü–ª–∞–Ω –ø–æ—Å—Ç–∞–≤–æ–∫:')
    j = 0
    for row in plan_matrix:
        j += 1
        i = 0
        for column in row:
            i += 1
            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if plan_matrix[j-1, i-1] != 0:
                print('–ò–∑ {}-–æ–≥–æ —Å–∫–ª–∞–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å {} —Ç—ã—Å. —à—Ç. '
                      '–∫–∏—Ä–ø–∏—á–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç {};'.format(j, column, i))


def solving_100_scipy():
    """–ù–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –ø–æ—ç—Ç–æ–º—É –æ—Ç–≤–µ—Ç –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞—Å—á–µ—Ç –ø–æ–¥–æ–≥–Ω–∞–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
    # –ó–∞–¥–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –æ—Ç —Ä–∞—Å–∫—Ä–æ—è
    c = [0, 0, 40, 20, 50, 80, 20, 60, 90]
    # –ó–∞–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ª–µ–≤—ã—Ö —á–∞—Å—Ç–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥–æ—Ç–æ–≤–æ–∫
    a_eq = np.array([[5, 0, 0, 0, 1, 2, 1, 2, 3],
                     [0, 4, 0, 2, 1, 0, 3, 2, 1],
                     [0, 0, 2, 1, 1, 1, 0, 0, 0]])
    # –ó–∞–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä –ø—Ä–∞–≤—Ö —á–∞—Å—Ç–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥–æ—Ç–æ–≤–æ–∫
    b_eq = [1000, 4000, 2000]

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    opt = optimize.linprog(c, A_eq=a_eq, b_eq=b_eq, bounds=None, method='interior-point')
    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –¥–æ —Å–æ—Ç—ã—Ö
    result = round(opt.fun, 2)

    # –í—ã–≤–µ–¥–µ–º –æ–±—ä–µ–º –æ—Ç—Ö–æ–¥–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω
    print('\n‚úî–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 2 –ø–æ–¥–∑–∞–¥–∞—á–∏ 100‚úî\n')
    print('üóë–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã –ø–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –ø–ª–∞–Ω–µ —Å–æ—Å—Ç–∞–≤—è—Ç: min(z) = {} —Å–º.\n'.format(result))
    # –ò–∑–≤–ª–µ—á–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞—Å–ø–∏–ª–∞
    cut_plan = np.array([round(i, 2) for i in opt.x])
    # –ü–æ—Å—á–∏—Ç–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ –±—Ä–µ–≤–µ–Ω
    sum_materials = 0
    for i in cut_plan:
        sum_materials += i
    print('üå≥–ò—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—Ä–µ–≤–µ–Ω –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞: {} —à—Ç—É–∫\n'.format(sum_materials))
    # –ü–æ—Å—Ç—Ä–æ–∏–º –ø–ª–∞–Ω —Ä–∞—Å–ø–∏–ª–∞ –∏ –≤—ã–≤–µ–¥–µ–º –≤—Å–µ –Ω–∞ —ç–∫—Ä–∞–Ω
    print('üî™–ü–ª–∞–Ω —Ä–∞—Å–ø–∏–ª–∞:')
    num = 0
    for i in cut_plan:
        num += 1
        if i != 0:
            print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø–∏–ª–∏—Ç—å {} –¥–æ—Å–æ–∫ –≤ —Å–æ–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–∏ —Å {} –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —Ä–∞—Å–ø–∏–ª–∞;\n".format(i, num))
    print(tables.cut_variants)


def solving_100_pulp():
    """Pupl solver use 'COIN-OR branch and cut'(CBC) optimization method in pulp.apis.COIN_CMD class
    + —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""

    # –û–±—ä—è–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    opt_model = p.LpProblem('–ó–∞–¥–∞—á–∞_–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ_—Ä–∞—Å–∫—Ä–æ—è', p.LpMinimize)

    # –í–Ω–æ—Å–∏–º –≤ –º–æ–¥–µ–ª—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    x1 = p.LpVariable("x1", lowBound=0)  # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é x1> = 0
    x2 = p.LpVariable("x2", lowBound=0)  # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é x2> = 0
    x3 = p.LpVariable("x3", lowBound=0)  # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é x3> = 0
    x4 = p.LpVariable("x4", lowBound=0)  # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é x4> = 0
    x5 = p.LpVariable("x5", lowBound=0)  # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é x5> = 0
    x6 = p.LpVariable("x6", lowBound=0)  # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é x6> = 0
    x7 = p.LpVariable("x7", lowBound=0)  # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é x7> = 0
    x8 = p.LpVariable("x8", lowBound=0)  # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é x8> = 0
    x9 = p.LpVariable("x9", lowBound=0)  # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é x9> = 0

    # –í–Ω–æ—Å–∏–º –≤ –º–æ–¥–µ–ª—å —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    opt_model += (40*x3 + 20*x4 + 50*x5 + 80*x6 + 20*x7 + 60*x8 + 90*x9), '–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è'

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞:
    opt_model += (5*x1 + x5 + 2*x6 + x7 + 2*x8 + 3*x9 == 1000), '–ü–µ—Ä–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ'
    opt_model += (4*x2 + 2*x4 + x5 + 7*x3 + 2*x8 + x9 == 4000), '–í—Ç–æ—Ä–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ'
    opt_model += (2*x3 + x4 + x5 + x6 == 2000), '–¢—Ä–µ—Ç—å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ'

    # –í—ã–∑—ã–≤–∞–µ–º CBC-–æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    opt_model.solve()

    # –ü–µ—á–∞—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    print("\n‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè")
    print("–ü–ª–∞–Ω —Ä–∞—Å–ø–∏–ª–∞:", flush=True)
    sum_materials = 0
    for i in opt_model.variables():
        if p.value(i) != 0:
            print('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø–∏–ª–∏—Ç—å {} –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —Ä–∞—Å–ø–∏–ª–∞ {}'.format(i.varValue, i.name))
            sum_materials += p.value(i)
    print("\n–û—Ç—Ö–æ–¥—ã: {}".format(p.value(opt_model.objective)))
    print("\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—Ä–µ–≤–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞: {}".format(sum_materials))
    print(tables.cut_variants)
    print("‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè‚óè")


solving_90() # —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 2 –ø–æ–¥–∑–∞–¥–∞—á–∏ 90
solving_92() # —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 2 –ø–æ–¥–∑–∞–¥–∞—á–∏ 90
# solving_100_scipy() # —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 2 –ø–æ–¥–∑–∞–¥–∞—á–∏ 100 –ù–ï —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º + –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
solving_100_pulp() # —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 2 –ø–æ–¥–∑–∞–¥–∞—á–∏ 100 —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º + –ù–ï –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
